// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    DMux(in=true, sel = instruction[15], a =addrinst, b= compinst);
    And16(a=instruction, b= true, out[0]= cinstjbit3,out[1]=cinstjbit2,out[2]=cinstjbit1,out[3]=cinstdbit3,out[4]=cinstdbit2,out[5]=cinstdbit1,out[6]= cinstcbit6,out[7]=cinstcbit5,out[8]=cinstcbit4,out[9]= cinstcbit3,out[10]= cinstcbit2,out[11] = cinstcbit1, out[12]= cinstabit, out[0..14]= aaddr);

// This is the a register
    Mux16(sel= addrinst, a=ALUout, b = instruction, out= ain);
    Or(a= cinstdbit1 , b= addrinst, out= aload);
    ARegister(in= ain, load= aload, out= aout, out[0..14]=addressM);

//d register
    And(a = cinstdbit2, b= compinst, out=dload);
    DRegister(in=ALUout, load=dload, out =Dout);
//ALU
    Mux16(sel=cinstabit, a= aout, b= inM, out= aorm);
    ALU(x=Dout, y= aorm, zx=cinstcbit1, nx= cinstcbit2, zy=cinstcbit3, ny=cinstcbit4, f= cinstcbit5, no= cinstcbit6, out=ALUout, out=outM, zr=zr, ng=ng);
    And(a=cinstdbit3, b=compinst, out= writeM);
    
//Jumping    
    Or(a=zr, b=ng, out=zrandng);
    Not(in=zrandng, out=ps);
    And(a=cinstjbit1, b=ng, out=jlt);
    And(a=cinstjbit2, b=zr, out=jeq);
    And(a=cinstjbit3, b=ps, out=jgt);

    Or(a = jlt, b=jeq, out=jmp1);
    Or(a= jmp1, b= jgt, out=jmp2);
    And(a= jmp2, b=compinst, out=jmp);

//PC
    Not(in=jmp, out=inc);
    PC(in=aout, load=jmp, inc= inc, reset=reset, out[0..14]=pc);
}